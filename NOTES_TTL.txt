PYTHON
--------
Python is a 
*general purpose
*interpreted 
*interacted
*scripting(special time of environment)
*object oriented
*dynamic(no ned to speciy the data type)
*and high level programming language(user friendly)

DEVELOPED BY: Guido an Rossum at national research insititute for mathematics ans Computer Science Netherland
-------------  (1985-990)

WHY NAME PYTHON?   he is inspired by a BBC show(the complete  pyhton circus)
-----------------

WHY ARE WE USING? 1. simple language and easy to understand
----------------- 2. very coincile code
                  3. ML and Data Science , IOT , Neural network
                  4. above thing can be implemented easly by using python
================================================================

DATATYPES: int , float ,compelx, tuple ,dictionary,bool,string
LITERALS : 
OPERATOR :    1. ARITHMATIC +, -, * ,/ ,//(INT DIVISION) ,**
              2. COMPARISION  >=,<= ,!-(<>) 
              3. ASSIGNMENT =,+=,.. 
              4. LOGICAL   and, or , not
              5. Bit wise >>,<<,&,|,~,^
              6. membership  in ,not in 
              7. identity  is , is not(not equal)
================================================================

COMMENT : single line and multi line string
-------   ( #....)       ('''.......'''')  

================================================================
control statement
1.DECISION MAKING(if el,IF,IFELIF,SWITCH(MATCH))     //CONDITIONAL

2. JUMP(CONTINUE,BREAK,PASS)     //UNCONDITIONAL

3. LOOPING ( FOR, WHILE) 



1. if else

          if a>b:
              print("lora")
           elif("b>c")
              print("simen")
           el
                  ....

2. switch case(match)

           match argument:
                case constant:
                  statemet...

                case constant:
                  statemet...

    		    case constant:
                  statemet...

2. while loop

              while a<=b:
                  stat

4. for loop
              
                for a in list:
                     print(a)
              
                for i in range(n):
                          
                     print (list[i])

5. jump statement
   break
   continue
   pass
               

============================================================   

String
--------------  

-->string is immutable  //we cannot change the value/delete a particular element
          -------------
    but we can delete the whole string/change the whole string

----------------------------------------------
-->s="hello"
m="hello"

here s and m will refere to same adress
i.e here only  object will be created insead of 2
 ---------------------------------------------------------------------
-->substring
  
   s[1st pos:lastpos-1]
   s[-1]  //lse index value
   s[-3:]  // 
   s[-2:-1] //from -2 t o-2
---------------------------------------------------------------------
-->predefine operators
   
    +    //append
    *   //repeat a strin
    []  
     :  //slicing operator
    in   
    not in
    r/R  //will neglect \n  eg print(r"hello\n how\nare you\n")//no new line
    %d   //format specifier

----------------------------------------------------------------------
-->type(str)//type
   id(str)//adres
   
====================================================================================
    LIST
----------------

list1=[1,'heloo',32,,'i love her']

->list1[1:3:stepsize]

->frwd indexing and bacward indexing(to print in reverse order)

->list1[::-1]    //will start frm last index

->is mutable i.e we can change or acess it

funcn
-----
->del(list1)

->list1.remove(elemennt)

->max(list1)

->min(list1)

->list1.append(val) //to take input from keyboard

->list1+list2

->len(lsit2)


=============================================================


TUPLE
-------

tuple1 =(lora,lori)
tuple=1,2,3

->immutable //cant change the value but if nested list is there we can change

  eg tupe1=(1,2,3,[12,31,132],132)

    tuple1[4][2]=1 //we can change

->   del tuple1[1]  //not valid
     del tuple1   //valid

-> tupl1.count(element)
==============================================================


SETS
-----
contains only unique eleemnt

myset={1,2,3,4,13,3,1,2}// actually it as only 1,2,3,4,13 

myset=set({elem1elem2,elem3});

function
---------

set.add()//to take input form keyboard
set.update([12,23])
set.discard(6) //no error is thrown if not found
set.remove(4)
set.pop()
set.clear()

newset.union(set1)
newset=set1|set2

=================================================================

DICTINOARY
----------
mydic={
"nmae":123,              // key value should be nin curley braces
"roll":213;
"parent":1233
}

=====================================================================
FUNCTION

def func_name(arg_list):

     stat
     return exprn   // return(exprsn)

-> By default it is call by refrenece

TYPES:
1.FUNC WITH DEFAULT VALUE:

  myfunc1(a,b=7)//if not paased willl take the default value


2.funcn with keyword argument

   myfunc1(a,b)

call: myfunc(b=23,a=7)//in any sequence we can pass the arrgument

3.REQUIRED ARGUMENT
VARIABLE LENGTH ARGUMENT
 
 
 *args ->for non keyword argument
------------------------------------------
      def myfun(*a):
           print(a[2])
           print(a)

      call:
        myfunc(1,2,3,4,5)  //we can passs as many arguments we want

 **kwargs ->for the keyword arguments
-----------------------------------------
       def myfun(**a):
           print(a["name"])

      call:
        myfunc("roll"=25,"name"="hitu")  // when we have key value pairs

-------------------------------------------------
anonymous functiom :funcn having no name
  
  syntax: funcnaem=lamda argument:exprn
  eg 
    r=lambda a:a*a
    print(r(5))

---------------------------------------------------
function without body cannnot be defined
so we use "pass" keywird
def myfunc():
    pass


============================================================================================

Recusrion: funcn calling it self

  def my_fun(n)
     if(n==0):
       return 
     print(n)
     my_fun(n-1)

==============================================================================
class and Object

class classname:

clssname =obj()

_init_   // to initialize a constructor

self  // in funcn argument we pass an extra argument    
 
this // to refer the data member of the same class

==========================================================================
  
inheritance
------------

3 types 

single
multi level
multiple
hydrid

class classname(pparent_class name):
  code


====================================================================

polymorphism
-------------------

overloading
----------------
only tthe last statemnt/function  will be called


support overrriding
---------------------
dervided will be called


========================================================================
constructor in case of inheritance
----------------------------------

we must have to  call the base class constructor inside  the derived one constructor:
  2 ways to call the base class constructor:-
1 super
  super().__init__(name,roll):               // no need to place self

2. by using the base calss name  : 
     base_class.__init__(self,name,roll):   // self need to be there


===================================================================================
particular class is a sub class or not :
  
 issubclass(subclass,superclass)  //retrun true or false

object belong to which class  :

 isinstance(obj,class) // retrun 1 or 0

=====================================================================================

data abstraction

by making the data member as private/ hidden by using "__"
-> and to access them we have to use classname.member

eg:    __A=20

    class_name.__a=21;


function with no body: by using pass statement

class with no body also by using pass:

eg class A:
     pass

=====================================================================================




 






    
 

   







    